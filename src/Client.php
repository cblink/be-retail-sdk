<?php

namespace Cblink\BeRetail;

use Ramsey\Uuid\Uuid;
use Mouyong\Foundation\AbstractClient;
use Cblink\BeRetail\Exceptions\BeRetailApiException;
use Cblink\BeRetail\Exceptions\MethodRetryTooManyException;

class Client extends AbstractClient
{
    public function post($cmd, $data = [], $options = [])
    {
        $body = $data;

        $data = [];
        $data['data'] = $body;
        $data['cmd'] = $cmd;

        return parent::post('', $data, $options); // TODO: Change the autogenerated stub
    }

    public function sign(array $data = []): array
    {
        $data['encode'] = $data['encode'] ?? true;

        $req['cmd'] = $data['cmd'];
        $req['timestamp'] = time();
        $req['version'] = 3;
        $req['ticket'] = strtoupper(Uuid::uuid4()->toString());
        $req['source'] = $this->app->options['source'];
        $req['body'] = json_encode($data['data']);
        $req['secret'] = $this->app->options['secret'];
        $req['encrypt'] = $this->app->options['encrypt'] ?? '';
        $req['fields'] = $this->app->options['fields'] ?? '';

        if (empty($req['fields'])) {
            unset($req['fields']);
        }

        ksort($req);

        $signStrArr = [];
        foreach ($req as $key => $value) {
            $signStrArr[] = "$key=$value";
        }

        $signStr = implode('&', $signStrArr);
        $req['sign'] = strtoupper(md5($signStr));

        $req['body'] = $data['encode'] ? $req['body'] : json_decode($req['body'], true);
        unset($req['secret']);

        return $req;
    }

    /**
     * 响应请求信息
     *
     * @param string $cmd
     * @param array $data
     * @param int $errno
     * @param string $error
     * @return array
     */
    public function beRsp(string $cmd, $data = null, $errno = 0, $error = 'success')
    {
        $data['cmd'] = 'rsp.'.$cmd;
        $data['data'] = array_filter(compact('errno', 'error', 'data'));

        return $this->sign($data);
    }

    public function request(string $method, string $uri, array $options = [], $retry = 1)
    {
        if ($retry === -1) {
            throw new MethodRetryTooManyException("In SDK: uri: {$options['form_params']['cmd']} 重试次数过多");
        }

        try {
            $rsp = $this->getClient()->request($method, $uri, $options);
        } catch (\Throwable $e) {
            $this->app->log->info('request', [
                'method' => $method,
                'url' => $uri,
                'data' => $options,
            ]);

            $this->app->log->error("请求出现错误 code: {$e->getCode()} message: {$e->getMessage()}");
            throw new BeRetailApiException($e->getMessage(), $e->getCode(), $e->getPrevious());
        }

        try {
            return $this->castResponseToType($rsp);
        } catch (\Throwable $e) {
            $this->app->log->error("转换响应信息出现错误 error: {$e->getCode()} error_description: {$e->getMessage()} , request data ", $options);
            throw $e;
        }
    }

    public function castResponseToType($rsp)
    {
        if (!empty($this->app->options['http']['response_type']) && $this->app->options['http']['response_type'] === 'raw') {
            return $rsp;
        }

        $data = json_decode($rsp->getBody()->getContents(), true);

        if (empty($data)) {
            $this->app->log->error('响应数据为空');

            throw new BeRetailApiException('响应数据为空', 500);
        }

        if (isset($data['body']) && intval($data['body']['errno']) !== 0) {
            throw new BeRetailApiException($data['body']['error'], $data['body']['errno']);
        }

        $this->app->log->info('响应信息', $data);

        return $data['body']['data'];
    }
}